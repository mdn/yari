<%
// ListGroups
//
// Generates a list of each group (API) from the GroupData JSON and
// returns it. This can be used to create an index of APIs.

let locale = env.locale;
let APIHref = '/' + locale + '/docs/Web/API';
let output = '';

// Conveniences to shorten names of some functions

let htmlEscape = mdn.htmlEscape;
let spacesToUnderscores = web.spacesToUnderscores;

// Get the GroupData database

let groupData = web.getJSONData("GroupData")[0];
let groupNames = Object.keys(groupData);
groupNames.sort();

function containsTag(tagList, tag) {
  let ret = false;

  if (!tagList || tagList == undefined) {
    return 0;
  }
  tag = tag.toLowerCase();
  tagList.forEach(function(t) {
    if (t.toLowerCase() === tag) {
      ret = true;
    }
  });
  return ret;
}

// Start building the lists for each letter

let outputByLetter = [];

for(let name of groupNames) {
  let groupObj = groupData[name];
  let firstLetter = name[0];
  let groupOutput = '';

  if (groupObj.overview === undefined) {
    continue;
  }
  let overviewName = groupObj.overview;
  let groupUrl = APIHref + "/" + spacesToUnderscores(htmlEscape(overviewName));
  const aPage = await wiki.getPage(groupUrl);

  let pageBadges = (await page.badges(aPage)).join(" ");

  if (pageBadges.length) {
    pageBadges = `<span class='indexListBadges'> ${pageBadges}</span>`;
  }

  // Finish constructing the HTML and then append it to the text for the corresponding
  // letter group.

  groupOutput = `<li><a href='${groupUrl}'>${name}</a>${pageBadges}</li>`;

  if (!outputByLetter[firstLetter]) {
    outputByLetter[firstLetter] = groupOutput;
  } else {
    outputByLetter[firstLetter] += groupOutput;
  }
}

// Now output the whole thing

let keys = Object.keys(outputByLetter);

keys.forEach(function(letter) {
  output += `<h3>${letter}</h3>
  <ul>${outputByLetter[letter]}</ul>`;
});

%><div class="index">
  <%-output%>
</div>
