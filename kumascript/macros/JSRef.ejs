<%
// Generate quick links for JavaScript standard objects docs
//
// TODO: Ordering of prototype / static methods (bug 948576)
//
// Parameters are OBSOLETE. DO NOT USE ANYMORE.
//
//  $0 - JavaScript reference section (e.g Global_Objects) – OBSOLETE
//  $1 - JavaScript reference object/subject (e.g. Number, Array, Function) – OBSOLETE
//  $2 - Related objects to display (comma separated) – OBSOLETE

// Strings
const commonl10n = web.getJSONData('L10n-Common');
const jsl10n = web.getJSONData('L10n-JavaScript');

const text = {
  stdlib: mdn.getLocalString(jsl10n, 'stdlib'),
  Constructor: mdn.getLocalString(commonl10n, 'Constructor'),
  Properties: mdn.getLocalString(commonl10n, 'Properties'),
  Methods: mdn.getLocalString(commonl10n, 'Methods'),
  Inheritance: mdn.getLocalString(commonl10n, 'Inheritance'),
  Related: mdn.getLocalString(commonl10n, 'Related_pages_wo_group'),
};

// Variables
const slug = env.slug;
let output = "";
const locale = env.locale;
const slugStdlib = `/${env.locale}/docs/Web/JavaScript/Reference/Global_Objects`;
const subSlug = slug.replace('Web/JavaScript/Reference/Global_Objects/', '');
let subSlugParts = subSlug.split('/');
// For Intl, we should use the first two parts of the slug if has
// e.g. subSlug startswith 'Intl/Collator' we should use 'Intl.Collator'
subSlugParts = subSlugParts.slice(0, subSlugParts[0] === "Intl" ? 2 : 1);
let mainObj = subSlugParts.join('.');

// Data for inheritance chain
const inheritanceData = {
  Math: ["Object"],
  Date: ["Object"],
  Function: ["Object"],
  Object: [],
  JSON: ["Object"],
  Intl: ["Object"],
  arguments: [],
  Reflect: ["Object"],
  Proxy: [],
  Atomics: ["Object"],
  WebAssembly: ["Object"]
};

const inheritance = inheritanceData[mainObj] ?? ["Object", "Function"];

// Data for related pages
const groupData = {
  Error: ["Error", "EvalError", "InternalError", "RangeError", "ReferenceError", "SyntaxError", "TypeError", "URIError"],
  Intl: ["Intl", "Intl.Collator", "Intl.DateTimeFormat", "Intl.ListFormat", "Intl.NumberFormat", "Intl.PluralRules", "Intl.RelativeTimeFormat", "Intl.Segmenter"],
  TypedArray: ["TypedArray", "Int8Array", "Uint8Array", "Uint8ClampedArray", "Int16Array", "Uint16Array",
                "Int32Array", "Uint32Array", "Float32Array", "Float64Array", "BigInt64Array", "BigUint64Array"],
  Proxy: ["Proxy", "handler"],
  WebAssembly: ["WebAssembly", "WebAssembly.Module", "WebAssembly.Global", "WebAssembly.Instance", "WebAssembly.Memory",
                "WebAssembly.Table", "WebAssembly.CompileError", "WebAssembly.LinkError", "WebAssembly.RuntimeError",
                "WebAssembly.Tag", "WebAssembly.Exception"]
};

// Exceptions, we want the main object in the sidebar (e.g. Int8Array -> TypedArray)
if (groupData.TypedArray.includes(mainObj)) {
  mainObj = "TypedArray";
} else if (groupData.Error.includes(mainObj)) {
  mainObj = "Error";
} else if (groupData.Proxy.includes(mainObj)) {
  mainObj = "Proxy/handler";
}

// Get related pages from groups and exclude self
let group = [];
for(const key in groupData) {
  const index = groupData[key].indexOf(mainObj);
  if(index !== -1) {
    group = groupData[key];
    group.splice(index, 1);
    break;
  }
}

const mainObjSlug = mainObj.replace(/\./g, '/'); // e.g. Intl.Collator -> Intl/Collator

// Collect pages
const source = {};
source[mainObj] = await page.subpagesExpand(`/en-US/docs/Web/JavaScript/Reference/Global_Objects/${mainObjSlug}`);

const result = {};
result[mainObj] = {
  title: mainObj,
  subSlug: mainObjSlug,
  constructors: [],
  methods: [],
  properties: [],
  defaultOpened: true
};

if (inheritance.includes("Function")) {
  source.iFunction = await page.subpagesExpand('/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function');

  result.iFunction = {
    title: "Function",
    subSlug: "Function",
    constructors: [],
    methods: [],
    properties: [],
    defaultOpened: false
  };
}

if (inheritance.includes("Object")) {
  source.iObject = await page.subpagesExpand('/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object');

  result.iObject = {
    title: "Object",
    subSlug: "Object",
    constructors: [],
    methods: [],
    properties: [],
    defaultOpened: false
  };
}

function isPrototypeMemberPage(page) {
  return [
    "javascript-instance-accessor-property",
    "javascript-instance-data-property",
    "javascript-instance-method",
  ].includes(page.pageType);
}

function isPropertyPage(page) {
  return [
    "javascript-static-accessor-property",
    "javascript-static-data-property",
    "javascript-instance-accessor-property",
    "javascript-instance-data-property",
  ].includes(page.pageType);
}

function isMethodPage(page) {
  return [
    "javascript-static-method",
    "javascript-instance-method",
  ].includes(page.pageType);
}

function isConstructorPage(page) {
  return "javascript-constructor" === page.pageType;
}

for (const object in source) {
  let pageList = source[object];
  if (object === "iObject") {
    // For objects, we're only interested in prototype members.
    pageList = pageList.filter(page => isPrototypeMemberPage(page));
  }
  for (const page of pageList) {
    if (isConstructorPage(page)) {
      result[object].constructors.push(page);
    }
    if (isPropertyPage(page)) {
      result[object].properties.push(page);
    }
    if (isMethodPage(page)) {
      result[object].methods.push(page);
    }
  }
}

// Output helper

async function buildSublist(pages, title, opened) {
  let result = opened ? "<li><details open>" : "<li><details>";

  result += `<summary>${title}</summary></a><ol>`;

  const getTitle = locale === "en-US"
    ? page => page.title
    : page => page.translations.find(translation => translation.locale === locale)?.title ?? page.title;

  const items = pages.map(async aPage => {
    const url = aPage.url.replace("en-US", locale);
    const title = getTitle(aPage);
    const pageBadges = (await page.badges(aPage)).join("");

    return `<li>${web.smartLink(url, null, `<code>${title}</code>`, aPage.slug, slugStdlib, "JSRef")}${pageBadges}</li>`
  })

  // Wait for all the links to be built
  const itemsResolved = await Promise.all(items);

  result += itemsResolved.join("");
  result += "</ol></details></li>";

  return result;
}

let len = 0;

// Output

output = '<section class="Quick_links" id="Quick_links"><ol>';
const link = web.smartLink(slugStdlib, null, text.stdlib, slugStdlib, slugStdlib, "JSRef");
output += `<li><strong>${link}</strong></li>`;

for (const key in result) {
  len++;
  const object = result[key];
  const resultTitle        = object.title ?? "";
  const resultSubSlug      = object.subSlug ?? "";
  const resultConstructors = object.constructors ?? [];
  const resultProperties   = object.properties ?? [];
  const resultMethods      = object.methods ?? [];
  const resultOpen         = object.defaultOpened ?? false;

  if (len === 2) {
    output += `<li><strong>${text.Inheritance}</strong></li>`;
  }

  const link = web.smartLink(`${slugStdlib}/${resultSubSlug}`, null, `<code>${resultTitle}</code>`, null, slugStdlib, "JSRef");
  output += `<li><strong>${link}</strong></li>`;

  if (resultConstructors.length > 0) {
    output += await buildSublist(resultConstructors, text.Constructor, resultOpen);
  }
  if (resultProperties.length > 0) {
    output += await buildSublist(resultProperties, text.Properties, resultOpen);
  }
  if (resultMethods.length > 0) {
    output += await buildSublist(resultMethods, text.Methods, resultOpen);
  }

  if (len === 1 && group.length > 0) {
    output += `<li><strong>${text.Related}</strong></li>`;
    for (const g of group) {
      const link = web.smartLink(`${slugStdlib}/${g.replace(".", "/")}`, null, `<code>${g}</code>`, null, slugStdlib, "JSRef");
      output += `<li><strong>${link}</strong></li>`;
    }
  }
}

output += '</ol></section>';
%>

<%-output%>
