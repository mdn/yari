<%
// Inserts a notecards about this feature being available in Web Workers.
//
// Parameters:
//
//  $0 - workerType (optional):
//      'window_and_dedicated': only in DedicatedWorker (and in Window)
//      'dedicated': only in DedicatedWorker
//      'window_and_worker_except_service': all workers but ServiceWorker (and in Window)
//      'worker_except_service': all workers but ServiceWorker (and no window)
//      'window_and_service': only in ServiceWorker (and in Window)
//      'service':  only in ServiceWorker
//      null: (default) All workers (and Window)
//
//  {{AvailableInWorkers}}
//  {{AvailableInWorkers("worker_except_service")}}
//

const locale = env.locale;

const note = mdn.localString({
    "en-US": "Note:",
    "es": "Nota:",
    "fr": "Note:",
    "ja": "注:",
    "ko": "참고:",
    "ru": "Примечание:",
    "zh-CN": "备注：",
    "zh-TW": "備註：",
});

const textDefault = mdn.localString({
  "en-US": `This feature is available in <a href="/${locale}/docs/Web/API/Web_Workers_API">Web Workers</a>.`,
  "zh-CN": `此特性在 <a href="/${locale}/docs/Web/API/Web_Workers_API">Web Worker</a> 中可用。`,
  "zh-TW": `此功能可在 <a href="/${locale}/docs/Web/API/Web_Workers_API">Web Worker</a> 中使用。`,
  "es": `Esta característica está disponible en <a href="/${locale}/docs/Web/API/Web_Workers_API">Web Workers</a>.`,
  "fr": `Cette fonctionnalité est disponible via les <a href="/${locale}/docs/Web/API/Web_Workers_API">Web Workers</a>.`,
  "ja": `この機能は <a href="/${locale}/docs/Web/API/Web_Workers_API">Web Worker</a> 内で利用可能です。`,
  "ko": `이 기능은 <a href="/${locale}/docs/Web/API/Web_Workers_API">Web Worker</a>에서 사용할 수 있습니다.`,
  "ru": `Эта возможность доступна в <a href="/${locale}/docs/Web/API/Web_Workers_API">Web Workers</a>.`,
});

const textNotService = mdn.localString({
  "en-US": `This feature is available in <a href="/${locale}/docs/Web/API/Web_Workers_API">Web Workers</a>, except for <a href="/${locale}/docs/Web/API/Service_Worker_API">Service Workers</a>.`,
  "zh-CN": `此特性在 <a href="/${locale}/docs/Web/API/Web_Workers_API">Web Worker</a>（不包括 <a href="/${locale}/docs/Web/API/Service_Worker_API">Service Worker</a>）中可用。`,
  "zh-TW": `此功能可在 <a href="/${locale}/docs/Web/API/Web_Workers_API">Web Worker</a>（不包括 <a href="/${locale}/docs/Web/API/Service_Worker_API">Service Worker</a>）中使用。`,
});

const textNotServiceNotWindow = mdn.localString({
  "en-US": `This feature is only available in <a href="/${locale}/docs/Web/API/Web_Workers_API">Web Workers</a>, except for <a href="/${locale}/docs/Web/API/Service_Worker_API">Service Workers</a>.`,
  "zh-CN": `此特性仅在 <a href="/${locale}/docs/Web/API/Web_Workers_API">Web Worker</a>（不包括 <a href="/${locale}/docs/Web/API/Service_Worker_API">Service Worker</a>）中可用。`,
});

const textDedicated = mdn.localString({
  "en-US": `This feature is available in <a href="/${locale}/docs/Web/API/DedicatedWorkerGlobalScope">Dedicated Web Workers</a>.`,
  "zh-CN": `此特性在<a href="/${locale}/docs/Web/API/DedicatedWorkerGlobalScope">专用 Web Worker</a>中可用。`,
});

const textDedicatedOnly = mdn.localString({
  "en-US": `This feature is only available in <a href="/${locale}/docs/Web/API/DedicatedWorkerGlobalScope">Dedicated Web Workers</a>.`,
  "zh-CN": `此特性仅在<a href="/${locale}/docs/Web/API/DedicatedWorkerGlobalScope">专用 Web Worker</a> 中可用。`,
});

const textService = mdn.localString({
  "en-US": `This feature is available in <a href="/${locale}/docs/Web/API/Service_Worker_API">Service Workers</a>.`,
  "zh-CN": `此特性在 <a href="/${locale}/docs/Web/API/Service_Worker_API">Service Worker</a> 中可用。`,
});

const textServiceOnly = mdn.localString({
  "en-US": `This feature is only available in <a href="/${locale}/docs/Web/API/Service_Worker_API">Service Workers</a>.`,
  "zh-CN": `此特性仅在 <a href="/${locale}/docs/Web/API/Service_Worker_API">Service Worker</a> 中可用。`,
})

const workerType = $0 || 'default';

const associatedText = {
  default: () => textDefault,
  window_and_worker_except_service: () => textNotService,
  worker_except_service: () => textNotServiceNotWindow,
  window_and_dedicated: () => textDedicated,
  dedicated: () => textDedicatedOnly,
  window_and_service: () => textService,
  service: () => textServiceOnly,
};

if (!associatedText[workerType]) {
  throw new Error(`'${workerType}' is not a recognized argument to this macro`);
}

const text = associatedText[workerType]();

%>

<div class="notecard note">
  <p><strong><%- note %></strong> <%- text %></p>
</div>
