// Ensure environment variables are read.
import "../config/env.js";

import chalk from "chalk";
import webpack from "webpack";
import WebpackDevServer from "webpack-dev-server";

import configFactory from "../config/webpack.config.js";
import createDevServerConfig from "../config/webpackDevServer.config.js";

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on("unhandledRejection", (err) => {
  throw err;
});

// Tools like Cloud9 rely on this.
const PORT = parseInt(process.env.PORT, 10) || 3000;
const HOST = process.env.HOST || "0.0.0.0";

if (process.env.HOST) {
  console.log(
    chalk.cyan(
      `Attempting to bind to HOST environment variable: ${chalk.yellow(
        chalk.bold(process.env.HOST)
      )}`
    )
  );
  console.log(
    `If this was unintentional, check that you haven't mistakenly set it in your shell.`
  );
  console.log(
    `Learn more here: ${chalk.yellow("https://cra.link/advanced-config")}`
  );
  console.log();
}

const config = configFactory("development");
const compiler = webpack(config);
// Serve webpack assets generated by the compiler over a web server.
const serverConfig = {
  ...createDevServerConfig(),
  host: HOST,
  port: PORT,
};
const devServer = new WebpackDevServer(serverConfig, compiler);
// Launch WebpackDevServer.
devServer.startCallback(() => {
  console.log(chalk.cyan("Starting the development server...\n"));
});

["SIGINT", "SIGTERM"].forEach(function (sig) {
  process.on(sig, function () {
    devServer.stopCallback(() => process.exit());
  });
});

if (process.env.CI !== "true") {
  // Gracefully exit when stdin ends
  process.stdin.on("end", function () {
    devServer.stopCallback(() => process.exit());
  });
}
