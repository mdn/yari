# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Testing Yari

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.4.0

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.5.1
        with:
          node-version: "12"
          cache: "yarn"

      - name: Cache node_modules
        uses: actions/cache@v2.1.7
        id: cached-node_modules
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('.github/workflows/testing.yml') }}

      - name: Install all yarn packages
        if: steps.cached-node_modules.outputs.cache-hit != 'true'
        run: |
          yarn --frozen-lockfile

      - name: Lint prettier
        run: yarn prettier-check

      - name: Lint ESLint
        run: yarn eslint

      - name: Unit testing client
        run: yarn test:client

      - name: Build and start server
        id: server
        env:
          ENV_FILE: testing/.env
        run: |

          # because `yarn prepare-build` is a wrapper for `yarn build:client` and
          # `yarn build:client` can't respect the `$ENV_FILE` environment variable,
          # because it has to build from the `./client/` directory, we have to
          # manually copy the `testing/.env` file into `client/` so that when
          # `yarn build:client` runs, it gets the same environment variables
          # as you'd get when doing `yarn build:ssr`.
          cp testing/.env client/

          yarn prepare-build
          yarn build

          yarn start:static-server > /tmp/stdout.log 2> /tmp/stderr.log &
          sleep 1
          curl --fail --retry-connrefused --retry 5 http://localhost:5000 > /dev/null

      - name: Functional testing
        run: |
          yarn test:testing
          yarn test:headless

      - name: Basic m2h/h2m tool testing
        env:
          ENV_FILE: testing/.env
        run: |
          yarn md m2h markdown/tool/m2h --locale en-US
          diff -s testing/content/files/en-us/markdown/tool/m2h/index.html testing/content/files/en-us/markdown/tool/m2h/expected.html
          yarn md h2m markdown/tool/h2m --locale en-US
          diff -s testing/content/files/en-us/markdown/tool/h2m/index.md testing/content/files/en-us/markdown/tool/h2m/expected.md

      - name: Debug server's stdout and stderr if tests failed
        if: failure() && steps.server.outcome != 'skipped'
        run: |
          echo "STDOUT..................................................."
          cat /tmp/stdout.log
          echo ""
          echo "STDERR..................................................."
          cat /tmp/stderr.log
