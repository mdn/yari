name: Stage Cloud Deploy

on:
  workflow_dispatch:
    inputs:
      notes:
        description: "Notes"
        required: false
        default: ""

      deployment_prefix:
        description: "Deployment prefix"
        required: false
        default: "main"

      invalidate:
        description: "Invalidate CDN (use only in exceptional circumstances)"
        type: boolean
        required: false
        default: false

permissions:
  contents: read
  id-token: write

jobs:
  build:
    environment: stage
    runs-on: ubuntu-latest

    steps:
      - name: Print information about deploy
        run: |
          echo "notes: ${{ github.event.inputs.notes }}"
          echo "deployment_prefix: ${{ github.event.inputs.deployment_prefix }}"
          echo "invalidate: ${{ github.event.inputs.invalidate }}"

      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          path: mdn/yari

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version-file: mdn/yari/.nvmrc

      - name: Get content commits
        working-directory: mdn/yari
        run: |-
          curl https://storage.googleapis.com/${{ vars.GCP_BUCKET_NAME }}/${{ github.event.inputs.deployment_prefix }}/_whatsdeployed/content.json -o content.json
          curl https://storage.googleapis.com/${{ vars.GCP_BUCKET_NAME }}/${{ github.event.inputs.deployment_prefix }}/_whatsdeployed/translated-content.json -o translated-content.json

          content=$(node -e "console.log(JSON.parse(require('fs').readFileSync('content.json','utf-8')).commit)")
          translated_content=$(node -e "console.log(JSON.parse(require('fs').readFileSync('translated-content.json','utf-8')).commit)")

          echo "CONTENT_REF=$content" >> $GITHUB_ENV
          echo "TRANSLATED_CONTENT_REF=$content" >> $GITHUB_ENV

      - name: Checkout (content)
        uses: actions/checkout@v5
        with:
          repository: mdn/content
          path: mdn/content
          # Yes, this means fetch EVERY COMMIT EVER.
          # It's probably not sustainable in the far future (e.g. past 2021)
          # but for now it's good enough. We'll need all the history
          # so we can figure out each document's last-modified date.
          fetch-depth: 0
          ref: ${{ vars.CONTENT_REF }}

      - name: Checkout (translated-content)
        uses: actions/checkout@v5
        with:
          repository: mdn/translated-content
          path: mdn/translated-content
          # See matching warning for mdn/content checkout step
          fetch-depth: 0
          ref: ${{ vars.TRANSLATED_CONTENT_REF }}

      - name: Checkout (translated-content-de)
        uses: actions/checkout@v5
        with:
          repository: mdn/translated-content-de
          path: mdn/translated-content-de

      - name: Move de into translated-content
        run: |
          mv mdn/translated-content-de/files/de mdn/translated-content/files/
          rm -rf mdn/translated-content-de

      - name: Install all yarn packages
        working-directory: mdn/yari
        run: yarn --frozen-lockfile
        env:
          # Use a GITHUB_TOKEN to bypass rate limiting for rari.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download sitemap
        working-directory: mdn/yari
        run: |
          mkdir -p client/build
          cd client/build
          curl https://storage.googleapis.com/${{ vars.GCP_BUCKET_NAME }}/${{ github.event.inputs.deployment_prefix }}/sitemap.txt -o sitemap.txt

      - name: Generate redirects map
        working-directory: mdn/yari/cloud-function
        env:
          CONTENT_ROOT: ${{ github.workspace }}/mdn/content/files
          CONTENT_TRANSLATED_ROOT: ${{ github.workspace }}/mdn/translated-content/files
        run: |
          npm ci
          npm run build-redirects
          npm run build-canonicals

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          service_account: deploy-stage-nonprod-mdn-ingre@${{ secrets.GCP_PROJECT_NAME }}.iam.gserviceaccount.com
          workload_identity_provider: projects/${{ secrets.WIP_PROJECT_ID }}/locations/global/workloadIdentityPools/github-actions/providers/github-actions

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: "beta"

      - name: Deploy Function
        working-directory: mdn/yari
        run: |-
          set -eo pipefail

          for region in europe-west1 us-west1 asia-east1; do
            gcloud beta functions deploy mdn-nonprod-stage-$region \
            --gen2 \
            --runtime=nodejs22 \
            --region=$region \
            --source=cloud-function \
            --trigger-http \
            --allow-unauthenticated \
            --entry-point=mdnHandler \
            --concurrency=100 \
            --min-instances=1 \
            --max-instances=100 \
            --memory=2GB \
            --timeout=120s \
            --run-service-account=run-nonprod-stage-functions@${{ secrets.GCP_PROJECT_NAME }}.iam.gserviceaccount.com \
            --set-env-vars="IGNORED_ROUTES=" \
            --set-env-vars="ORIGIN_MAIN=developer.allizom.org" \
            --set-env-vars="ORIGIN_LIVE_SAMPLES=live.mdnyalp.dev" \
            --set-env-vars="ORIGIN_PLAY=mdnyalp.dev" \
            --set-env-vars="SOURCE_CONTENT=https://storage.googleapis.com/${{ vars.GCP_BUCKET_NAME }}/${{ github.event.inputs.deployment_prefix }}/" \
            --set-env-vars="SOURCE_API=https://api.developer.allizom.org/" \
            --set-env-vars="ORIGIN_TRIAL_TOKEN=AwIRl96ZjeFFEsdas+GXmpHvd3ARcQPYgBIGhQzZtyG9PpESvUi8ea4gpiQq9QsYRsVAWBeeBgBYqp/oLQPna0YAAABfeyJvcmlnaW4iOiJodHRwczovL2RldmVsb3Blci5hbGxpem9tLm9yZyIsImZlYXR1cmUiOiJQcml2YXRlQXR0cmlidXRpb25WMiIsImV4cGlyeSI6MTc0MjA3OTYwMH0=" \
            --set-env-vars="BSA_ENABLED=true" \
            --set-env-vars="SENTRY_DSN=${{ secrets.SENTRY_DSN_CLOUD_FUNCTION }}" \
            --set-env-vars="SENTRY_ENVIRONMENT=stage" \
            --set-env-vars="SENTRY_TRACES_SAMPLE_RATE=${{ vars.SENTRY_TRACES_SAMPLE_RATE }}" \
            --set-env-vars="SENTRY_RELEASE=${{ github.sha }}" \
            --set-secrets="KEVEL_SITE_ID=projects/${{ secrets.GCP_PROJECT_NAME }}/secrets/stage-kevel-site-id/versions/latest" \
            --set-secrets="KEVEL_NETWORK_ID=projects/${{ secrets.GCP_PROJECT_NAME }}/secrets/stage-kevel-network-id/versions/latest" \
            --set-secrets="SIGN_SECRET=projects/${{ secrets.GCP_PROJECT_NAME }}/secrets/stage-sign-secret/versions/latest" \
            --set-secrets="BSA_ZONE_KEYS=projects/${{ secrets.GCP_PROJECT_NAME }}/secrets/stage-bsa-zone-keys/versions/latest" \
            2>&1 | sed "s/^/[$region] /" &
            pids+=($!)
          done

          for pid in "${pids[@]}"; do
            wait $pid
          done

      - name: Invalidate CDN
        if: ${{ github.event.inputs.invalidate }}
        run: gcloud compute url-maps invalidate-cdn-cache ${{ secrets.GCP_LOAD_BALANCER_NAME }} --path "/*" --async
