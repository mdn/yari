name: Stage Build

# NOTE! This is the *STAGE* workflow.
# Keep in mind that much of the configuration is repeated in `prod-build.yml`
# and `dev-build.yml`
#
# For a complete picture of all environments, see:
#
#  https://docs.google.com/spreadsheets/d/1VnnEl-iTtKYmlyN02FiEXygxZCgE4o_ZO8wSleebne4/edit?usp=sharing
#

env:
  DEFAULT_DEPLOYMENT_PREFIX: "main"
  DEFAULT_NOTES: ""
  DEFAULT_ARCHIVED_CONTENT: "false"
  DEFAULT_LOG_EACH_SUCCESSFUL_UPLOAD: "false"

on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: "0 */24 * * *"

  workflow_dispatch:
    inputs:
      notes:
        description: "Notes"
        required: false
        default: ${DEFAULT_NOTES}
      archived_content:
        description: "Build archived content"
        required: false
        default: ${DEFAULT_ARCHIVED_CONTENT}

      # This is very useful when combined with the "Use workflow from"
      # feature that is built into the "Run workflow" button on
      # https://github.com/mdn/yari/actions?query=workflow%3A%22Production+Build%22
      # If you override the deployment prefix to something like the name
      # of the branch, you can deploy that entire branch to its own prefix
      # in S3 which means that it can be fully hosted as its own site.
      deployment_prefix:
        description: "Deployment prefix"
        required: false
        default: ${DEFAULT_DEPLOYMENT_PREFIX}

      log_each_successful_upload:
        description: "Deployer logs each success"
        required: false
        default: ${DEFAULT_LOG_EACH_SUCCESSFUL_UPLOAD}

jobs:
  build:
    runs-on: ubuntu-latest

    # Only run the scheduled workflows on the main repo.
    if: github.repository == 'mdn/yari'

    steps:
      - uses: actions/checkout@v2.3.4

      - uses: actions/checkout@v2.3.4
        with:
          repository: mdn/content
          path: mdn/content
          # Yes, this means fetch EVERY COMMIT EVER.
          # It's probably not sustainable in the far future (e.g. past 2021)
          # but for now it's good enough. We'll need all the history
          # so we can figure out each document's last-modified date.
          fetch-depth: 0

      # Our usecase is a bit complicated. When the cron schedule runs this workflow,
      # we rely on the env vars defined at the top of the file. But if it's a manual
      # trigger we rely on the inputs and only the inputs. That way, the user can
      # opt to type in 'false'.
      # It's not possible to express this with GitHub Workflow syntax, so we
      # have a dedicate set that conveniently sets these as env vars which we
      # can refer to later in `if: ....` lines or in bash with the `run: ...` blocks.
      - name: Merge dispatch inputs with default env vars
        run: |
          echo "BUILD_ARCHIVED_CONTENT=${{ github.event.inputs.archived_content || env.DEFAULT_ARCHIVED_CONTENT }}" >> $GITHUB_ENV
          echo "DEPLOYER_BUCKET_PREFIX=${{ github.event.inputs.deployment_prefix || env.DEFAULT_DEPLOYMENT_PREFIX }}" >> $GITHUB_ENV
          echo "DEPLOYER_LOG_EACH_SUCCESSFUL_UPLOAD=${{ github.event.inputs.log_each_successful_upload || env.DEFAULT_LOG_EACH_SUCCESSFUL_UPLOAD }}" >> $GITHUB_ENV

      - uses: actions/checkout@v2.3.4
        if: "contains(env.BUILD_ARCHIVED_CONTENT, 'true')"
        with:
          repository: mdn/archived-content
          path: mdn/archived-content

      - uses: actions/checkout@v2.3.4
        with:
          repository: mdn/translated-content
          path: mdn/translated-content

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.2.0
        with:
          node-version: "12"

      - name: Cache node_modules
        uses: actions/cache@v2.1.6
        id: cached-node_modules
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}

      - name: Install all yarn packages
        if: steps.cached-node_modules.outputs.cache-hit != 'true'
        env:
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 1
        run: yarn --frozen-lockfile

      - name: Install Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: "3.8"

      - name: Install Python poetry
        uses: snok/install-poetry@v1.1.6

      - name: Install deployer
        run: |
          cd deployer
          poetry install

      - name: Display Python & Poetry version
        run: |
          python --version
          poetry --version

      - name: Print information about build
        run: |
          echo "notes: ${{ github.event.inputs.notes || env.DEFAULT_NOTES }}"
          echo "archived_content: ${{ github.event.inputs.archived_content || env.DEFAULT_ARCHIVED_CONTENT }}"
          echo "log_each_successful_upload: ${{ github.event.inputs.log_each_successful_upload || env.DEFAULT_LOG_EACH_SUCCESSFUL_UPLOAD }}"
          echo "deployment_prefix: ${{ github.event.inputs.deployment_prefix || env.DEFAULT_DEPLOYMENT_PREFIX }}"
          echo "BUILD_ARCHIVED_CONTENT: ${{ env.BUILD_ARCHIVED_CONTENT }}"

      - name: Build everything
        env:
          # Remember, the mdn/content repo got cloned into `pwd` into a
          # sub-folder called "mdn/content"
          CONTENT_ROOT: ${{ github.workspace }}/mdn/content/files
          CONTENT_TRANSLATED_ROOT: ${{ github.workspace }}/mdn/translated-content/files

          # The default for this environment variable is geared for writers
          # (aka. local development). Usually defaults are supposed to be for
          # secure production but this is an exception and default
          # is not insecure.
          BUILD_LIVE_SAMPLES_BASE_URL: https://yari-demos.stage.mdn.mozit.cloud

          # Now is not the time to worry about flaws.
          BUILD_FLAW_LEVELS: "*:ignore"

          # This is the Google Analytics account ID for developer.mozilla.org
          # If it's used on other domains (e.g. stage or dev builds), it's OK
          # because ultimately Google Analytics will filter it out since the
          # origin domain isn't what that account expects.
          BUILD_GOOGLE_ANALYTICS_ACCOUNT: UA-36116321-5

          # See the code for a further explanation for this.
          # You get the ID from
          # https://speedcurve.com/mozilla-add-ons/mdn/settings/updated/#lux
          BUILD_SPEEDCURVE_LUX_ID: 108906238

          # Make sure every built page always has
          # '<meta name="robots" content="noindex, nofollow">' nomatter what
          # kind of document it is.
          BUILD_ALWAYS_NO_ROBOTS: true

          # This enables the Plus call-to-action banner and the Plus landing page
          REACT_APP_ENABLE_PLUS: true

        run: |
          if [ ${{ env.BUILD_ARCHIVED_CONTENT }} == "true" ]; then
            echo "Will build mdn/archived-content too"
            export CONTENT_ARCHIVED_ROOT=${{ github.workspace }}/mdn/archived-content/files
          else
            echo "Will NOT build mdn/archived-content too"
          fi

          # Info about which CONTENT_* environment variables were set and to what.
          echo "CONTENT_ROOT=$CONTENT_ROOT"
          echo "CONTENT_ARCHIVED_ROOT=$CONTENT_ARCHIVED_ROOT"
          echo "CONTENT_TRANSLATED_ROOT=$CONTENT_TRANSLATED_ROOT"
          yarn prepare-build

          yarn tool sync-translated-content
          yarn build

          du -sh client/build

      - name: Deploy with deployer
        env:
          GITHUB_SHA: ${{ env.GITHUB_SHA }}
          GITHUB_RUN_ID: ${{ env.GITHUB_RUN_ID }}
          GITHUB_ACTION: ${{ env.GITHUB_ACTION }}

          # Set the CONTENT_ROOT first
          CONTENT_ROOT: ${{ github.workspace }}/mdn/content/files
          CONTENT_TRANSLATED_ROOT: ${{ github.workspace }}/mdn/translated-content/files

          DEPLOYER_BUCKET_NAME: mdn-content-stage

          AWS_ACCESS_KEY_ID: ${{ secrets.DEPLOYER_STAGE_AND_DEV_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEPLOYER_STAGE_AND_DEV_AWS_SECRET_ACCESS_KEY }}

          # Note, command will pick up the site ID and deployment API key
          # from environment variables and if either of them is falsy, the
          # command will *not* fail. It will simply not deploy anything.
          SPEEDCURVE_DEPLOY_API_KEY: ${{ secrets.SPEEDCURVE_DEPLOY_API_KEY }}
          # Based on https://api.speedcurve.com/#get-all-sites using the API key
          SPEEDCURVE_DEPLOY_SITE_ID: 354836

          DEPLOYER_ELASTICSEARCH_URL: ${{ secrets.DEPLOYER_STAGE_ELASTICSEARCH_URL }}

        run: |

          if [ ${{ env.BUILD_ARCHIVED_CONTENT }} == "true" ]; then
            echo "Will build mdn/archived-content too"
            export CONTENT_ARCHIVED_ROOT=${{ github.workspace }}/mdn/archived-content/files
          else
            echo "Will NOT build mdn/archived-content too"
          fi

          # Info about which CONTENT_* environment variables were set and to what.
          echo "CONTENT_ROOT=$CONTENT_ROOT"
          echo "CONTENT_ARCHIVED_ROOT=$CONTENT_ARCHIVED_ROOT"
          echo "CONTENT_TRANSLATED_ROOT=$CONTENT_TRANSLATED_ROOT"

          cd deployer

          poetry run deployer whatsdeployed --output ../client/build/_whatsdeployed/code.json
          poetry run deployer whatsdeployed --output ../client/build/_whatsdeployed/content.json $CONTENT_ROOT
          poetry run deployer whatsdeployed --output ../client/build/_whatsdeployed/translated-content.json $CONTENT_TRANSLATED_ROOT
          # XXX would be nice to validate here that $DEPLOYER_BUCKET_PREFIX is truthy
          echo "DEPLOYER_BUCKET_PREFIX=$DEPLOYER_BUCKET_PREFIX"

          # Prune again once https://github.com/mdn/yari/issues/3323 is resolved.
          # poetry run deployer upload --prune --archived-files ../content/archived.txt ../client/build
          poetry run deployer upload ../client/build
          poetry run deployer update-lambda-functions ./aws-lambda
          poetry run deployer search-index ../client/build

          # Record the deployment in our Speedcurve account. This should always
          # be done after the upload of the documents and Lambda functions, as well
          # as the search-index update, so those aren't affected if this fails.
          poetry run deployer speedcurve-deploy \
            --note "${GITHUB_SHA}" \
            --detail "run_id=${GITHUB_RUN_ID} action=${GITHUB_ACTION}"
